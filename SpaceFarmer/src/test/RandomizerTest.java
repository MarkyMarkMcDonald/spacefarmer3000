// $codepro.audit.disable

/* This is a JUnit test case file and is thus not subject to an audit.
 */

package test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

import org.junit.Test;

import app.service.Randomizer;

/**
 * This class runs the JUnit tests for the Randomizer class.
 * Some methods in the Randomizer class are such that they can't be tested without an
 * active instance of the SpaceFarmer3000 game running, so only the methods that function
 * by themselves are tested.
 * 
 * @author Andrew Wilder
 * @version 1.0
 */
public class RandomizerTest {
	
	/** Enums to test the randEnum method */
	private static enum NUMS {RED, GREEN, BLUE, YELLOW};

	/**
	 * Test that each enum in a class can be returned by randEnum()
	 */
	@Test
	public void randEnumTester() {
		
		// Test it 1000 times, because randomness
		for(int k = 0; k < 1000; ++k) {
			Set<NUMS> numcol = new HashSet<NUMS>();
			
			// Add all possible enums to a set (four possible types)
			for(int i = 0; numcol.size() < 4; ++i) {
				numcol.add((NUMS)Randomizer.randEnum(NUMS.class));
				
				// If an arbitrarily large number of iterations doesn't yield all results, fail
				if(i >= 1000) {
					fail("Not all enums possible returned by randEnum()");
				}
			}
			
			// Make sure that every enum was indeed the types in NUM
			assertTrue(numcol.contains(NUMS.RED));
			assertTrue(numcol.contains(NUMS.GREEN));
			assertTrue(numcol.contains(NUMS.BLUE));
			assertTrue(numcol.contains(NUMS.YELLOW));
		}
	}
	
	/**
	 * Test that the integers generated by this function are unique and within range
	 */
	@Test
	public void uniqueRandomIntsTester() {
		
		// Test it 1000 times, because randomness
		for(int k = 0; k < 1000; ++k) {
			Integer[] vals1 = Randomizer.uniqueRandomInts(5, 16, 7);
			Collection<Integer> numbers = new ArrayList<Integer>();
			for(Integer i : vals1) {
				
				// Make sure number is within range
				if(i < 5) {
					fail("Number was returned that is out of range (too low)");
				} else if(i >= 16) {
					fail("Number was returned that is out of range (too high)");
				}
				
				// Check for duplicates
				if(numbers.contains(i)) {
					fail("Duplicate number returned: " + i);
				} else {
					numbers.add(i);
				}
			}
		}
	}
	
	/**
	 * Test that randElement() returns a random Object like it's supposed to
	 */
	@Test
	public void randElementTester() {
		
		// Test it 1000 times, because randomness
		for(int k = 0; k < 1000; ++k) {
			Object[] objs = {new Scanner(""),
					         new HashMap<String, NUMS>(),
					         new ArrayList<Double>(),
					         new Randomizer()};
			Set<Class<?>> classes = new HashSet<Class<?>>();
			for(int i = 0; classes.size() < 4; ++i) {
				Object obj = Randomizer.randElement(objs);
				classes.add(obj.getClass());
				
				// If not all are found in an arbitrarily large number of iterations, fail
				if(i >= 1000) {
					fail("Not all class types were returned");
				}
			}
			
			// Make sure that every class was returned
			assertTrue(classes.contains(Scanner.class));
			assertTrue(classes.contains(HashMap.class));
			assertTrue(classes.contains(ArrayList.class));
			assertTrue(classes.contains(Randomizer.class));
		}
	}
	
	/**
	 * Test that the distributeNumber() method distributes a number as evenly as possible.
	 */
	@Test
	public void distributeNumberTester() {
		
		// Test 1000 times, because randomness
		for(int k = 0; k < 1000; ++k) {
			int[] nums = Randomizer.distributeNumber(7, 52);
			int count = 0;
			for(int n : nums) {
				
				// Number can only be 7 or 8
				assertTrue(n == 7 || n == 8);
				
				// Count the 8s
				if(n == 8) {
					++count;
				}
			}
			
			// Check that there were only three 8s
			assertEquals(count, 3);
		}
	}
	
	/**
	 * Return information about this class as a String object.
	 * @return This class's name.
	 */
	public String toString() {
		return "RandomizerTest";
	}
}